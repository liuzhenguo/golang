#include <stdio.h>
#include <stdlib.h>

int getStandard(int array[], int i, int j) {
	//基准数据 
	
	int t = 0;
	int key = array[i];
	while (i < j) {
			//因为默认基准是从左边开始，所以从右边开始比较 
			//当队尾的元素大于等于基准数据 时,就一直向前挪动 j 指针 
			while (i < j && array[j] >= key) j--;
			array[i] = array[j];
			//当找到比 array[i] 小的时，就把后面的值 array[j] 赋给它 
			//当队首元素小于等于基准数据 时,就一直向后挪动 i 指针 
			while (i < j && array[i] <= key) i++;
			array[j] = array[i];
			//当找到比 array[j] 大的时，就把前面的值 array[i] 赋给它
		}
	//跳出循环时 i 和 j 相等,此时的 i 或 j 就是 key 的正确索引位置
	//把基准数据赋给正确位置 
	array[i] = key;
//	display(array, 10);
	return i;
}
void QuickSort(int array[], int low, int high) {
	//开始默认基准为 low
	if (low < high) {
		//分段位置下标 
		int standard = getStandard(array, low, high);
		display(array, 10);
		printf("low=%d,statand=%d,high=%d\n",low,standard,high);
		
		//递归调用排序
		//左边排序 
		QuickSort(array, low, standard - 1);
		//右边排序 
		printf("**right**\n") ;
		QuickSort(array, standard + 1, high);
	}
}
void display(int array[], int size) {
	int i;
	for ( i = 0; i < size; i++) {
		printf("%d ", array[i]);
	}
	printf("\n");
}
int main() {
	int array[] = {6,1,2,7,9,3,4,5,10,8};
	int size = sizeof(array) / sizeof(int);
	printf("%d \n", size);
	QuickSort(array, 0, size - 1);
	display(array, size);
	return 0;
}
